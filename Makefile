.DEFAULT_GOAL = help
.PHONY: api-doc api-explorer black check dev dnd5esheets/templates/spellbook.html \
	docker-build docker-run init mypy ruff run svelte-check svelte-build help

ifeq (, $(shell which poetry))
$(error "No poetry executable found in $$PATH. Follow these instructions to install it: \
https://python-poetry.org/docs/#installing-with-the-official-installer")
endif

app-root = dnd5esheets
app-port = 8000
app-cli = poetry run python3 $(app-root)/cli.py
npm = cd $(app-root)/client && npm
npm-run = $(npm) run

$(app-root)/translations/messages.pot: $(app-root)/templates/*.html
	poetry run pybabel extract --omit-header -F babel.cfg -o $(app-root)/translations/messages.pot .

$(wildcard $(app-root)/translations/*/*/messages.po): $(app-root)/translations/messages.pot
	poetry run pybabel update --omit-header --no-fuzzy-matching -i $(app-root)/translations/messages.pot -d $(app-root)/translations

$(wildcard $(app-root)/translations/*/*/messages.mo): $(wildcard $(app-root)/translations/*/*/messages.po)
	poetry run pybabel compile --use-fuzzy -d $(app-root)/translations

$(app-root)/templates/spellbook.html:
	python3 scripts/generate_spellbook.py > $(app-root)/templates/spellbook.html

$(app-root)/client/openapi.json: $(wildcard $(app-root)/api/*.py) $(app-root)/schemas.py
	@# This one is a bit tricky, as the openapi.json file is generated by the fastapi app itself.
	@# To get it, we start the app in the background, give it 3s to start, request the endpoint,
	@# save the file locally and then kill the app with a SIGTERM.
	cd $(app-root) && poetry run uvicorn $(app-root).app:app&
	@sleep 3  # Sorry dad
	curl -s http://localhost:$(app-port)/openapi.json > $(app-root)/client/openapi.json
	kill $$(lsof -i tcp:$(app-port) | grep -v PID | head -n 1 | awk '{ print $$2 }')
	python3 scripts/preprocess_openapi_json.py

$(app-root)/schemas.py:

$(wildcard $(app-root)/api/*.py):

$(wildcard $(app-root)/client/src/5esheet-client/*/*.ts):
	$(npm-run) generate-client

api-doc:  ## Open the 5esheets API documentation
	open http://localhost:$(app-port)/redoc

api-explorer:  ## Open the 5esheets API explorer (with interactive requests)
	open http://localhost:$(app-port)/docs

build: svelte-build  ## Build the application

black:
	poetry run black $(app-root)/

check: black mypy ruff svelte-check ## Run all checks on the python codebase

dev:  ## Install the development environment
	poetry install
	$(npm) install

docker-build:  build requirements.txt  ## Build the docker image
	docker build -t brouberol/5esheets .

docker-run:  docker-build  ## Run the docker image
	docker run -it --rm -v $$(pwd)/$(app-root)/db:/usr/src/app/$(app-root)/db/ -p $(app-port):$(app-port) brouberol/5esheets

db-migrate:  ## Run the SQL migrations
	poetry run alembic upgrade head

db-dev-fixtures:  db-migrate ## Populate the local database with development fixtures
	$(app-cli) db populate

init:  dev db-dev-fixtures run  ## Run the application for the first time

mypy:
	poetry run mypy $(app-root)/

poetry.lock: pyproject.toml
	poetry lock

pyproject.toml:

requirements.txt: poetry.lock
	poetry export --without=dev -o requirements.txt

svelte-build: svelte-generate-api-client
	$(npm-run) build

svelte-check:
	$(npm-run) check

svelte-generate-api-client: $(app-root)/client/openapi.json  ## Generate the API openapi.json file

ruff:
	poetry run ruff --fix $(app-root)/

run: build  ## Run the app
	cd $(app-root) && poetry run uvicorn $(app-root).app:app --reload

translations-extract: $(app-root)/translations/messages.pot  ## Extract all strings to translate from jinja templates

translations-update: $(wildcard $(app-root)/translations/*/*/messages.po)  ## Update the language catalogs with new translations

translations-compile: $(wildcard $(app-root)/translations/*/*/messages.mo)  ## Compile translations into a .mo file

help:  ## Display help
	@grep -E '^[%a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?##"}; {printf "\033[36m%-26s\033[0m %s\n", $$1, $$2}'
