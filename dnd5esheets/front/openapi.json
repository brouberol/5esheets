{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/api/character/": {
      "get": {
        "tags": [
          "character"
        ],
        "summary": "List Characters",
        "description": "List all characters.\n\nThe returned payload will not include the character sheet details.",
        "operationId": "list_characters",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ListCharacterSchema"
                  },
                  "type": "array",
                  "title": "Response Character-List Characters"
                }
              }
            }
          }
        },
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ]
      }
    },
    "/api/character/{slug}": {
      "get": {
        "tags": [
          "character"
        ],
        "summary": "Get Character",
        "description": "Returns all details of a given character.",
        "operationId": "get_character",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "character"
        ],
        "summary": "Update Character",
        "description": "Update a character details.\n\nExamples of JSON body paylods:\n\n- `{\"level\": 5 }`\n- `{\"name\": \"Toto\"}`\n- `{\"class_\": \"Guerrier\", \"data\": {\"background\": \"Folk Hero\"}}`\n\nIn the last example, we update both a direct character attribute\nas well as an attribute nested in the character JSON data.",
        "operationId": "update_character",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCharacterSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Character-Update Character"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "character"
        ],
        "summary": "Delete Character",
        "description": "Delete the character associated with the slug and the currently logged in player id",
        "operationId": "delete_character",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/character/new": {
      "post": {
        "tags": [
          "character"
        ],
        "summary": "Create Character",
        "description": "Create a new character, without any data nor equipment",
        "operationId": "create_character",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCharacterSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ]
      }
    },
    "/api/character/{slug}/equipment/{item_id}": {
      "put": {
        "tags": [
          "character"
        ],
        "summary": "Add Item To Equipment",
        "description": "Ensure the argument item is present in the character's equipment",
        "operationId": "add_item_to_equipment",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          },
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Character-Add Item To Equipment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/character/{slug}/equipment/{equipped_item_id}": {
      "delete": {
        "tags": [
          "character"
        ],
        "summary": "Remove Item From Equipment",
        "description": "Ensure the argument item is absent from the character's equipment",
        "operationId": "remove_item_from_equipment",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          },
          {
            "name": "equipped_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Equipped Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Character-Remove Item From Equipment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/character/{slug}/equipment/{equipped_item_id}/equip": {
      "put": {
        "tags": [
          "character"
        ],
        "summary": "Equip Item",
        "description": "Set the argument equipped item as equipped",
        "operationId": "equip_item",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          },
          {
            "name": "equipped_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Equipped Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Character-Equip Item"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/character/{slug}/equipment/{equipped_item_id}/unequip": {
      "put": {
        "tags": [
          "character"
        ],
        "summary": "Unequip Item",
        "description": "Set the argument equipped item as unequipped",
        "operationId": "unequip_item",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          },
          {
            "name": "equipped_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Equipped Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Character-Unequip Item"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/character/{slug}/spellbook/{spell_id}": {
      "put": {
        "tags": [
          "character"
        ],
        "summary": "Learn Spell",
        "description": "Ensure the argument spell is added to the character's spellbook",
        "operationId": "learn_spell",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          },
          {
            "name": "spell_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Spell Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Character-Learn Spell"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/character/{slug}/spellbook/{known_spell_id}": {
      "delete": {
        "tags": [
          "character"
        ],
        "summary": "Forget Spell",
        "description": "Ensure the argument known spell is absent from the character's spellbook",
        "operationId": "forget_spell",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          },
          {
            "name": "known_spell_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Known Spell Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Character-Forget Spell"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/character/{slug}/spellbook/{known_spell_id}/prepare": {
      "put": {
        "tags": [
          "character"
        ],
        "summary": "Prepare Spell",
        "description": "Set the argument known spell as prepared",
        "operationId": "prepare_spell",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          },
          {
            "name": "known_spell_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Known Spell Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Character-Prepare Spell"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/character/{slug}/spellbook/{known_spell_id}/unprepare": {
      "put": {
        "tags": [
          "character"
        ],
        "summary": "Unprepare Spell",
        "description": "Set the argument known spell as unprepared",
        "operationId": "unprepare_spell",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          },
          {
            "name": "known_spell_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Known Spell Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Character-Unprepare Spell"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/party/": {
      "get": {
        "tags": [
          "party"
        ],
        "summary": "List All Parties",
        "description": "List all parties the current player has characters in",
        "operationId": "list_all_parties",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PartySchema"
                  },
                  "type": "array",
                  "title": "Response Party-List All Parties"
                }
              }
            }
          }
        },
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ]
      }
    },
    "/api/party/{id}": {
      "get": {
        "tags": [
          "party"
        ],
        "summary": "Display Party",
        "description": "Display all details of a given party.",
        "operationId": "display_party",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayPartySchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "party"
        ],
        "summary": "Update Party",
        "description": "Update a party details.\n\nExamples of JSON body paylods:",
        "operationId": "update_party",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePartySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Party-Update Party"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/player/{id}": {
      "get": {
        "tags": [
          "player"
        ],
        "summary": "Display Player",
        "description": "Display all details of a given player.",
        "operationId": "display_player",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayPlayerSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "player"
        ],
        "summary": "Update Player",
        "description": "Update a player details.\n\nExamples of JSON body paylods:",
        "operationId": "update_player",
        "security": [
          {
            "JwtAccessBearer": []
          },
          {
            "JwtAccessCookie": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlayerSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Player-Update Player"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/login/token": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "Login For Access Token",
        "description": "Submit a player's username and password to login.\n\nIf the password verifies, returns a JWT usable to communicate with the API.\nIf not, raise a 401 error.",
        "operationId": "login_for_access_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login-login_for_access_token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/spell/{id}": {
      "get": {
        "tags": [
          "spell"
        ],
        "summary": "Get Spell",
        "description": "Return all details of a given spell.",
        "operationId": "get_spell",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpellSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/item/{id}": {
      "get": {
        "tags": [
          "item"
        ],
        "summary": "Get Item",
        "description": "Return all details of a given item.",
        "operationId": "get_item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Abilities": {
        "properties": {
          "charisma": {
            "$ref": "#/components/schemas/Ability"
          },
          "constitution": {
            "$ref": "#/components/schemas/Ability"
          },
          "dexterity": {
            "$ref": "#/components/schemas/Ability"
          },
          "intelligence": {
            "$ref": "#/components/schemas/Ability"
          },
          "strength": {
            "$ref": "#/components/schemas/Ability"
          },
          "wisdom": {
            "$ref": "#/components/schemas/Ability"
          }
        },
        "type": "object",
        "required": [
          "charisma",
          "constitution",
          "dexterity",
          "intelligence",
          "strength",
          "wisdom"
        ],
        "title": "Abilities"
      },
      "Ability": {
        "properties": {
          "score": {
            "type": "integer",
            "maximum": 30.0,
            "minimum": 0.0,
            "title": "The ability score"
          },
          "proficiency": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "modifier": {
            "type": "integer",
            "title": "Modifier"
          },
          "save": {
            "type": "integer",
            "title": "Save"
          }
        },
        "type": "object",
        "required": [
          "score",
          "proficiency",
          "modifier",
          "save",
          "modifier",
          "save"
        ],
        "title": "Ability"
      },
      "AbilityName": {
        "type": "string",
        "enum": [
          "charisma",
          "constitution",
          "dexterity",
          "intelligence",
          "strength",
          "wisdom"
        ],
        "title": "AbilityName"
      },
      "Attack": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "bonus": {
            "type": "integer",
            "title": "Bonus"
          },
          "damage": {
            "type": "string",
            "title": "Damage"
          },
          "damage_type": {
            "type": "string",
            "title": "Damage Type"
          }
        },
        "type": "object",
        "required": [
          "name",
          "bonus",
          "damage",
          "damage_type"
        ],
        "title": "Attack"
      },
      "Body_login-login_for_access_token": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login-login_for_access_token"
      },
      "CharacterSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The character primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The character name"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "title": "The character slug, used to identify it in the API"
          },
          "class_": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 80
              },
              {
                "type": "null"
              }
            ],
            "title": "The character class"
          },
          "level": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 20.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "The character level"
          },
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CharacterSheet"
              },
              {
                "type": "null"
              }
            ],
            "description": "The embdedded character sheet JSON data"
          },
          "party": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartySchema"
              }
            ],
            "title": "The embedded character's party schema"
          },
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerSchema"
              }
            ],
            "title": "The embedded character's player schema"
          },
          "equipment": {
            "items": {
              "$ref": "#/components/schemas/EquippedItemSchema"
            },
            "type": "array",
            "title": "The character's equipment"
          },
          "spellbook": {
            "items": {
              "$ref": "#/components/schemas/RestrictedKnownSpellSchema"
            },
            "type": "array",
            "title": "The character's spellbook content"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "data",
          "party",
          "player",
          "equipment",
          "spellbook"
        ],
        "title": "CharacterSchema",
        "description": "All details associated with a character"
      },
      "CharacterSchemaNoPartyNoData": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The character primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The character name"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "title": "The character slug, used to identify it in the API"
          },
          "class_": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 80
              },
              {
                "type": "null"
              }
            ],
            "title": "The character class"
          },
          "level": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 20.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "The character level"
          },
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerSchema"
              }
            ],
            "title": "The embedded character's player schema"
          },
          "equipment": {
            "items": {
              "$ref": "#/components/schemas/EquippedItemSchema"
            },
            "type": "array",
            "title": "The character's equipment"
          },
          "spellbook": {
            "items": {
              "$ref": "#/components/schemas/RestrictedKnownSpellSchema"
            },
            "type": "array",
            "title": "The character's spellbook content"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "player",
          "equipment",
          "spellbook"
        ],
        "title": "CharacterSchemaNoPartyNoData",
        "description": "The details of a character, excluding the party"
      },
      "CharacterSchemaNoPlayer": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The character primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The character name"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "title": "The character slug, used to identify it in the API"
          },
          "class_": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 80
              },
              {
                "type": "null"
              }
            ],
            "title": "The character class"
          },
          "level": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 20.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "The character level"
          },
          "party": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartySchema"
              }
            ],
            "title": "The embedded character's party schema"
          },
          "equipment": {
            "items": {
              "$ref": "#/components/schemas/EquippedItemSchema"
            },
            "type": "array",
            "title": "The character's equipment"
          },
          "spellbook": {
            "items": {
              "$ref": "#/components/schemas/RestrictedKnownSpellSchema"
            },
            "type": "array",
            "title": "The character's spellbook content"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "party",
          "equipment",
          "spellbook"
        ],
        "title": "CharacterSchemaNoPlayer",
        "description": "The details of a character, excluding the player"
      },
      "CharacterSheet": {
        "properties": {
          "abilities": {
            "$ref": "#/components/schemas/Abilities"
          },
          "skills": {
            "$ref": "#/components/schemas/Skills"
          },
          "xp": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Xp"
          },
          "race": {
            "type": "string",
            "title": "Race"
          },
          "background": {
            "type": "string",
            "title": "Background"
          },
          "alignment": {
            "type": "string",
            "title": "Alignment"
          },
          "darkvision": {
            "type": "boolean",
            "title": "Darkvision"
          },
          "inspiration": {
            "type": "boolean",
            "title": "Inspiration"
          },
          "speed": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Speed"
          },
          "hp": {
            "$ref": "#/components/schemas/HitPoints"
          },
          "hit_dice": {
            "$ref": "#/components/schemas/HitDice"
          },
          "money": {
            "$ref": "#/components/schemas/Money"
          },
          "custom_resources": {
            "items": {
              "$ref": "#/components/schemas/CustomResource"
            },
            "type": "array",
            "title": "Custom Resources"
          },
          "attacks": {
            "items": {
              "$ref": "#/components/schemas/Attack"
            },
            "type": "array",
            "title": "Attacks"
          },
          "languages_and_proficiencies": {
            "type": "string",
            "title": "Languages And Proficiencies"
          },
          "personality": {
            "type": "string",
            "title": "Personality"
          },
          "ideals": {
            "type": "string",
            "title": "Ideals"
          },
          "bonds": {
            "type": "string",
            "title": "Bonds"
          },
          "flaws": {
            "type": "string",
            "title": "Flaws"
          },
          "features": {
            "type": "string",
            "title": "Features"
          },
          "spellcasting_ability": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AbilityName"
              },
              {
                "type": "null"
              }
            ]
          },
          "daily_prepared_spells": {
            "type": "integer",
            "title": "Daily Prepared Spells"
          },
          "proficiency_bonus": {
            "type": "integer",
            "title": "Proficiency Bonus"
          },
          "ac": {
            "type": "integer",
            "title": "Ac"
          },
          "initiative": {
            "type": "integer",
            "title": "Initiative"
          },
          "spell_dc": {
            "type": "integer",
            "title": "Spell Dc"
          },
          "spell_attack_bonus": {
            "type": "integer",
            "title": "Spell Attack Bonus"
          },
          "passive_perception": {
            "type": "integer",
            "title": "Passive Perception"
          }
        },
        "type": "object",
        "required": [
          "abilities",
          "skills",
          "xp",
          "race",
          "background",
          "alignment",
          "darkvision",
          "inspiration",
          "speed",
          "hp",
          "hit_dice",
          "money",
          "custom_resources",
          "attacks",
          "languages_and_proficiencies",
          "personality",
          "ideals",
          "bonds",
          "flaws",
          "features",
          "spellcasting_ability",
          "daily_prepared_spells",
          "proficiency_bonus",
          "ac",
          "initiative",
          "spell_dc",
          "spell_attack_bonus",
          "passive_perception",
          "proficiency_bonus",
          "ac",
          "initiative",
          "spell_dc",
          "spell_attack_bonus",
          "passive_perception"
        ],
        "title": "CharacterSheet"
      },
      "CreateCharacterSchema": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The character name"
          },
          "party_id": {
            "type": "integer",
            "title": "The character's party id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "party_id"
        ],
        "title": "CreateCharacterSchema",
        "description": "All details associated with a character"
      },
      "CustomResource": {
        "properties": {
          "header": {
            "type": "string",
            "title": "Header"
          },
          "available": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Available"
          },
          "remaining": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Remaining"
          }
        },
        "type": "object",
        "required": [
          "header",
          "available",
          "remaining"
        ],
        "title": "CustomResource"
      },
      "DisplayPartySchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The party primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The party name"
          },
          "members": {
            "items": {
              "$ref": "#/components/schemas/CharacterSchemaNoPartyNoData"
            },
            "type": "array",
            "title": "The party members"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "members"
        ],
        "title": "DisplayPartySchema",
        "description": "A party details, including the members"
      },
      "DisplayPlayerSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The player primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The player name"
          },
          "characters": {
            "items": {
              "$ref": "#/components/schemas/CharacterSchemaNoPlayer"
            },
            "type": "array",
            "title": "The player's characters"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "characters"
        ],
        "title": "DisplayPlayerSchema",
        "description": "A player details including the list of their characters"
      },
      "DurationUnit": {
        "type": "string",
        "enum": [
          "day",
          "hour",
          "minute",
          "round"
        ],
        "title": "DurationUnit"
      },
      "EquippedItemSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The equipped item id in database"
          },
          "item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemSchema"
              }
            ],
            "title": "The equipped item details"
          },
          "amount": {
            "type": "integer",
            "minimum": 0.0,
            "title": "The amount of associated items found in the character's equipment"
          },
          "equipped": {
            "type": "boolean",
            "title": "Whether the item is currently equipped"
          }
        },
        "type": "object",
        "required": [
          "id",
          "item",
          "amount",
          "equipped"
        ],
        "title": "EquippedItemSchema",
        "description": "The details of an equipped item (the association bewteen an item and a character equipment)"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HitDice": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "total": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Total"
          },
          "remaining": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Remaining"
          }
        },
        "type": "object",
        "required": [
          "type",
          "total",
          "remaining"
        ],
        "title": "HitDice"
      },
      "HitPoints": {
        "properties": {
          "max": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max"
          },
          "temp": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Temp"
          },
          "current": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Current"
          }
        },
        "type": "object",
        "required": [
          "max",
          "temp",
          "current"
        ],
        "title": "HitPoints"
      },
      "ItemAttributes": {
        "properties": {
          "weapon_category": {
            "$ref": "#/components/schemas/WeaponCategory"
          },
          "weapon_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WeaponType"
              },
              {
                "type": "null"
              }
            ]
          },
          "ammo_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ammo Type"
          },
          "spellcasting_focus_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SpellCastingFocusType"
              },
              {
                "type": "null"
              }
            ]
          },
          "range": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Range"
          }
        },
        "type": "object",
        "required": [
          "weapon_category",
          "weapon_type",
          "ammo_type",
          "spellcasting_focus_type",
          "range"
        ],
        "title": "ItemAttributes"
      },
      "ItemDamage": {
        "properties": {
          "damage_1": {
            "type": "string",
            "title": "Damage 1"
          },
          "damage_type": {
            "type": "string",
            "title": "Damage Type"
          },
          "damage_2": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Damage 2"
          }
        },
        "type": "object",
        "required": [
          "damage_1",
          "damage_type",
          "damage_2"
        ],
        "title": "ItemDamage"
      },
      "ItemData": {
        "properties": {
          "source": {
            "$ref": "#/components/schemas/ResourceSource"
          },
          "srd": {
            "type": "boolean",
            "title": "Srd"
          },
          "subtype": {
            "type": "string",
            "title": "Subtype"
          },
          "meta": {
            "$ref": "#/components/schemas/ItemMeta"
          }
        },
        "type": "object",
        "required": [
          "source",
          "srd",
          "subtype",
          "meta"
        ],
        "title": "ItemData"
      },
      "ItemMeta": {
        "properties": {
          "translations": {
            "anyOf": [
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/ResourceTranslation"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Translations"
          },
          "rarity": {
            "type": "string",
            "title": "Rarity"
          },
          "weight": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Weight"
          },
          "value": {
            "type": "number",
            "title": "Value"
          },
          "attributes": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemAttributes"
              },
              {
                "type": "null"
              }
            ]
          },
          "damage": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ItemDamage"
              },
              {
                "type": "null"
              }
            ]
          },
          "property": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Property"
          },
          "effect": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Effect"
          },
          "requirements": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Requirements"
          },
          "stealth": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stealth"
          }
        },
        "type": "object",
        "required": [
          "translations",
          "rarity",
          "weight",
          "value",
          "attributes",
          "damage",
          "property",
          "effect",
          "requirements",
          "stealth"
        ],
        "title": "ItemMeta"
      },
      "ItemSchema": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The item name"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemData"
              }
            ],
            "description": "The embdedded item JSON data"
          }
        },
        "type": "object",
        "required": [
          "name",
          "data"
        ],
        "title": "ItemSchema",
        "description": "The details of an equipment item"
      },
      "ListCharacterSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The character primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The character name"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "title": "The character slug, used to identify it in the API"
          },
          "class_": {
            "type": "string",
            "maxLength": 80,
            "title": "The character class"
          },
          "level": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 1.0,
            "title": "The character level"
          },
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerSchema"
              }
            ],
            "title": "The embedded character's player schema"
          },
          "party": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartySchema"
              }
            ],
            "title": "The embedded character's party schema"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "player",
          "party"
        ],
        "title": "ListCharacterSchema"
      },
      "ListingSpellCasting": {
        "properties": {
          "verbal": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Whether casting the spell requires a vocal component",
            "default": false
          },
          "somatic": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Whether casting the spell requires a somatic component",
            "default": false
          },
          "concentration": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Whether casting the spell requires maintaining concentration",
            "default": false
          },
          "ritual": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Whether the spell can be casted as a ritual",
            "default": false
          },
          "needs_material": {
            "type": "boolean",
            "title": "Whether the spell requires material components"
          }
        },
        "type": "object",
        "required": [
          "verbal",
          "somatic",
          "concentration",
          "ritual",
          "needs_material"
        ],
        "title": "ListingSpellCasting"
      },
      "MagicSchool": {
        "type": "string",
        "enum": [
          "necromancy",
          "evocation",
          "enchantment",
          "illusion",
          "transmutation",
          "abjuration",
          "conjuration",
          "divination"
        ],
        "title": "MagicSchool"
      },
      "Money": {
        "properties": {
          "copper": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Amount of copper coins"
          },
          "silver": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Amount of silver coins"
          },
          "electrum": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Amount of electrum coins"
          },
          "gold": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Amount of gold coins"
          },
          "platinum": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Amount of platinum coins"
          }
        },
        "type": "object",
        "required": [
          "copper",
          "silver",
          "electrum",
          "gold",
          "platinum"
        ],
        "title": "Money"
      },
      "PartySchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The party primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The party name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "PartySchema",
        "description": "The basic details of a party"
      },
      "PlayerSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The player primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The player name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "PlayerSchema",
        "description": "The basic details of a player"
      },
      "Proficiency": {
        "type": "integer",
        "enum": [
          0,
          1,
          2
        ],
        "title": "Proficiency"
      },
      "ResourceSource": {
        "properties": {
          "book": {
            "type": "string",
            "title": "The resource source book"
          },
          "page": {
            "type": "integer",
            "minimum": 0.0,
            "title": "The page the resource is described at"
          }
        },
        "type": "object",
        "required": [
          "book",
          "page"
        ],
        "title": "ResourceSource"
      },
      "ResourceTranslation": {
        "properties": {
          "name": {
            "type": "string",
            "title": "The spell translated name"
          },
          "description": {
            "type": "string",
            "title": "The spell translated description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "title": "ResourceTranslation"
      },
      "RestrictedKnownSpellSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The known spell primary key in database"
          },
          "prepared": {
            "type": "boolean",
            "title": "Whether the spell is currently prepared"
          },
          "spell": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RestrictedSpellSchema"
              }
            ],
            "title": "The spell details"
          }
        },
        "type": "object",
        "required": [
          "id",
          "prepared",
          "spell"
        ],
        "title": "RestrictedKnownSpellSchema",
        "description": "The details of a known spell (the association between a character and a spell)"
      },
      "RestrictedSpellData": {
        "properties": {
          "casting": {
            "$ref": "#/components/schemas/ListingSpellCasting"
          }
        },
        "type": "object",
        "required": [
          "casting"
        ],
        "title": "RestrictedSpellData"
      },
      "RestrictedSpellSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The spell primary key in database"
          },
          "name": {
            "type": "string",
            "title": "The spell name"
          },
          "level": {
            "type": "integer",
            "maximum": 9.0,
            "minimum": 0.0,
            "title": "The spell level"
          },
          "school": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MagicSchool"
              }
            ],
            "title": "The spell magic school"
          },
          "data": {
            "$ref": "#/components/schemas/RestrictedSpellData"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "level",
          "school",
          "data"
        ],
        "title": "RestrictedSpellSchema"
      },
      "Skill": {
        "properties": {
          "proficiency": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "modifier": {
            "type": "integer",
            "title": "Modifier"
          }
        },
        "type": "object",
        "required": [
          "proficiency",
          "modifier",
          "modifier"
        ],
        "title": "Skill"
      },
      "Skills": {
        "properties": {
          "acrobatics": {
            "$ref": "#/components/schemas/Skill"
          },
          "arcana": {
            "$ref": "#/components/schemas/Skill"
          },
          "athletics": {
            "$ref": "#/components/schemas/Skill"
          },
          "stealth": {
            "$ref": "#/components/schemas/Skill"
          },
          "animal_handling": {
            "$ref": "#/components/schemas/Skill"
          },
          "sleight_of_hand": {
            "$ref": "#/components/schemas/Skill"
          },
          "history": {
            "$ref": "#/components/schemas/Skill"
          },
          "intimidation": {
            "$ref": "#/components/schemas/Skill"
          },
          "investigation": {
            "$ref": "#/components/schemas/Skill"
          },
          "medicine": {
            "$ref": "#/components/schemas/Skill"
          },
          "nature": {
            "$ref": "#/components/schemas/Skill"
          },
          "perception": {
            "$ref": "#/components/schemas/Skill"
          },
          "insight": {
            "$ref": "#/components/schemas/Skill"
          },
          "persuasion": {
            "$ref": "#/components/schemas/Skill"
          },
          "religion": {
            "$ref": "#/components/schemas/Skill"
          },
          "performance": {
            "$ref": "#/components/schemas/Skill"
          },
          "survival": {
            "$ref": "#/components/schemas/Skill"
          },
          "deception": {
            "$ref": "#/components/schemas/Skill"
          }
        },
        "type": "object",
        "required": [
          "acrobatics",
          "arcana",
          "athletics",
          "stealth",
          "animal_handling",
          "sleight_of_hand",
          "history",
          "intimidation",
          "investigation",
          "medicine",
          "nature",
          "perception",
          "insight",
          "persuasion",
          "religion",
          "performance",
          "survival",
          "deception"
        ],
        "title": "Skills"
      },
      "SpellCasting": {
        "properties": {
          "verbal": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Whether casting the spell requires a vocal component",
            "default": false
          },
          "somatic": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Whether casting the spell requires a somatic component",
            "default": false
          },
          "material": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SpellCastingMaterial"
              },
              {
                "type": "null"
              }
            ],
            "title": "The material components required to cast the spell"
          },
          "concentration": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Whether casting the spell requires maintaining concentration",
            "default": false
          },
          "ritual": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Whether the spell can be casted as a ritual",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "verbal",
          "somatic",
          "material",
          "concentration",
          "ritual"
        ],
        "title": "SpellCasting"
      },
      "SpellCastingFocusType": {
        "type": "string",
        "enum": [
          "arcane",
          "druid"
        ],
        "title": "SpellCastingFocusType"
      },
      "SpellCastingMaterial": {
        "properties": {
          "text": {
            "type": "string",
            "title": "A description of the material components required to cast a spell"
          },
          "cost": {
            "type": "integer",
            "title": "The minimum cost of the materials",
            "default": 0
          },
          "consume": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ],
            "title": "Consume"
          }
        },
        "type": "object",
        "required": [
          "text",
          "cost",
          "consume"
        ],
        "title": "SpellCastingMaterial"
      },
      "SpellData": {
        "properties": {
          "source": {
            "$ref": "#/components/schemas/ResourceSource"
          },
          "casting": {
            "$ref": "#/components/schemas/SpellCasting"
          },
          "meta": {
            "$ref": "#/components/schemas/SpellMeta"
          },
          "time": {
            "items": {
              "$ref": "#/components/schemas/SpellTime"
            },
            "type": "array",
            "title": "Time"
          },
          "range": {
            "$ref": "#/components/schemas/SpellRange"
          },
          "duration": {
            "items": {
              "$ref": "#/components/schemas/SpellDuration"
            },
            "type": "array",
            "title": "Duration"
          },
          "misc_tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Misc Tags",
            "default": []
          },
          "area_tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Area Tags",
            "default": []
          },
          "scaling_level_dice": {
            "items": {
              "$ref": "#/components/schemas/SpellScalingLevel"
            },
            "type": "array",
            "title": "Scaling Level Dice"
          },
          "damage_inflict": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Damage Inflict",
            "default": []
          },
          "saving_throw": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Saving Throw",
            "default": []
          },
          "condition_inflict": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Condition Inflict",
            "default": []
          },
          "affects_creature_type": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Affects Creature Type",
            "default": []
          },
          "spell_attack": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Spell Attack",
            "default": []
          },
          "ability_check": {
            "items": {
              "$ref": "#/components/schemas/AbilityName"
            },
            "type": "array",
            "title": "Ability Check",
            "default": []
          },
          "damage_resist": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Damage Resist",
            "default": []
          },
          "condition_immune": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Condition Immune",
            "default": []
          },
          "damage_vulnerable": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Damage Vulnerable",
            "default": []
          },
          "damage_immune": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Damage Immune",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "source",
          "casting",
          "meta",
          "time",
          "range",
          "duration",
          "misc_tags",
          "area_tags",
          "scaling_level_dice",
          "damage_inflict",
          "saving_throw",
          "condition_inflict",
          "affects_creature_type",
          "spell_attack",
          "ability_check",
          "damage_resist",
          "condition_immune",
          "damage_vulnerable",
          "damage_immune"
        ],
        "title": "SpellData"
      },
      "SpellDuration": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "unit": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DurationUnit"
              },
              {
                "type": "null"
              }
            ]
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount",
            "default": 0
          },
          "ends": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ends"
          }
        },
        "type": "object",
        "required": [
          "type",
          "unit",
          "amount",
          "ends"
        ],
        "title": "SpellDuration"
      },
      "SpellMeta": {
        "properties": {
          "description": {
            "type": "string",
            "title": "The spell description"
          },
          "translations": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ResourceTranslation"
            },
            "type": "object",
            "title": "Translations of the spell name and description"
          }
        },
        "type": "object",
        "required": [
          "description",
          "translations"
        ],
        "title": "SpellMeta"
      },
      "SpellRange": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "distance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SpellRangeDistance"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "type",
          "distance"
        ],
        "title": "SpellRange"
      },
      "SpellRangeDistance": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "amount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          }
        },
        "type": "object",
        "required": [
          "type",
          "amount"
        ],
        "title": "SpellRangeDistance"
      },
      "SpellScalingLevel": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label"
          },
          "scaling": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Scaling"
          }
        },
        "type": "object",
        "required": [
          "label",
          "scaling"
        ],
        "title": "SpellScalingLevel"
      },
      "SpellSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The spell primary key in database"
          },
          "name": {
            "type": "string",
            "title": "The spell name"
          },
          "level": {
            "type": "integer",
            "maximum": 9.0,
            "minimum": 0.0,
            "title": "The spell level"
          },
          "school": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MagicSchool"
              }
            ],
            "title": "The spell magic school"
          },
          "data": {
            "$ref": "#/components/schemas/SpellData"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "level",
          "school",
          "data"
        ],
        "title": "SpellSchema"
      },
      "SpellTime": {
        "properties": {
          "number": {
            "type": "integer",
            "title": "The amount of time units it takes to cast the spell"
          },
          "unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeUnit"
              }
            ],
            "title": "The type of time unit it takes to cast the spell"
          },
          "condition": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "A possible condition before being able to cast the spell"
          }
        },
        "type": "object",
        "required": [
          "number",
          "unit",
          "condition"
        ],
        "title": "SpellTime"
      },
      "TimeUnit": {
        "type": "string",
        "enum": [
          "action",
          "bonus",
          "reaction",
          "minute",
          "hour"
        ],
        "title": "TimeUnit"
      },
      "UpdateCharacterSchema": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "A new character name (Optional)"
          },
          "class_": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 80
              },
              {
                "type": "null"
              }
            ],
            "title": "A new character class (Optional)"
          },
          "level": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "A new character level (Optional)"
          },
          "data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updates to the character sheet fields (Optional)"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "UpdateCharacterSchema"
      },
      "UpdatePartySchema": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "The party new name"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "UpdatePartySchema"
      },
      "UpdatePlayerSchema": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "The player new name"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "UpdatePlayerSchema"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WeaponCategory": {
        "type": "string",
        "enum": [
          "simple",
          "heavy"
        ],
        "title": "WeaponCategory"
      },
      "WeaponType": {
        "type": "string",
        "enum": [
          "axe",
          "bow",
          "club",
          "crossbow",
          "dagger",
          "hammer",
          "mace",
          "net",
          "spear",
          "staff",
          "sword"
        ],
        "title": "WeaponType"
      }
    },
    "securitySchemes": {
      "JwtAccessBearer": {
        "type": "http",
        "scheme": "bearer"
      },
      "JwtAccessCookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "access_token_cookie"
      }
    }
  }
}