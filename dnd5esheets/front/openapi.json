{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/api/character/": {
      "get": {
        "tags": [
          "character"
        ],
        "summary": "List Characters",
        "description": "List all characters.\n\nThe returned payload will not include the character sheet details.",
        "operationId": "list_characters",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ListCharacterSchema"
                  },
                  "type": "array",
                  "title": "Response Character-List Characters"
                }
              }
            }
          }
        }
      }
    },
    "/api/character/{slug}": {
      "get": {
        "tags": [
          "character"
        ],
        "summary": "Display Character",
        "description": "Display all details of a given character.",
        "operationId": "display_character",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            },
            "name": "slug",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "character"
        ],
        "summary": "Update",
        "description": "Update a character details.\n\nExamples of JSON body paylods:\n\n- `{\"level\": 5 }`\n- `{\"name\": \"Toto\"}`\n- `{\"class_\": \"Guerrier\", \"data\": {\"background\": \"Folk Hero\"}}`\n\nIn the last example, we update both a direct character attribute\nas well as an attribute nested in the character JSON data.",
        "operationId": "update",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            },
            "name": "slug",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCharacterSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Character-Update"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/party/": {
      "get": {
        "tags": [
          "party"
        ],
        "summary": "List All Parties",
        "description": "List all parties the current player has characters in",
        "operationId": "list_all_parties",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PartySchema"
                  },
                  "type": "array",
                  "title": "Response Party-List All Parties"
                }
              }
            }
          }
        }
      }
    },
    "/api/party/{id}": {
      "get": {
        "tags": [
          "party"
        ],
        "summary": "Display Party",
        "description": "Display all details of a given party.",
        "operationId": "display_party",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayPartySchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "party"
        ],
        "summary": "Update Party",
        "description": "Update a party details.\n\nExamples of JSON body paylods:",
        "operationId": "update_party",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePartySchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Party-Update Party"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/player/{id}": {
      "get": {
        "tags": [
          "player"
        ],
        "summary": "Display Player",
        "description": "Display all details of a given player.",
        "operationId": "display_player",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayPlayerSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "player"
        ],
        "summary": "Update Player",
        "description": "Update a player details.\n\nExamples of JSON body paylods:",
        "operationId": "update_player",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlayerSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Player-Update Player"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/login/token": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "Login For Access Token",
        "description": "Submit a player's username and password to login.\n\nIf the password verifies, returns a JWT usable to communicate with the API.\nIf not, raise a 401 error.",
        "operationId": "login_for_access_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login-login_for_access_token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionType": {
        "enum": [
          "action",
          "bonus_action",
          "reaction"
        ],
        "title": "ActionType",
        "description": "An enumeration."
      },
      "Attack": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "bonus": {
            "type": "integer",
            "title": "Bonus"
          },
          "damage": {
            "type": "string",
            "title": "Damage"
          },
          "damage_type": {
            "type": "string",
            "title": "Damage Type"
          }
        },
        "type": "object",
        "required": [
          "name",
          "bonus",
          "damage",
          "damage_type"
        ],
        "title": "Attack"
      },
      "Body_login-login_for_access_token": {
        "properties": {
          "grant_type": {
            "type": "string",
            "pattern": "password",
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login-login_for_access_token"
      },
      "CharacterSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The character primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The character name"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "title": "The character slug, used to identify it in the API"
          },
          "class_": {
            "type": "string",
            "maxLength": 80,
            "title": "The character class"
          },
          "level": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The character level"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSheet"
              }
            ],
            "title": "Data",
            "description": "The embdedded character sheet JSON data"
          },
          "party": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartySchema"
              }
            ],
            "title": "The embedded character's party schema"
          },
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerSchema"
              }
            ],
            "title": "The embedded character's player schema"
          },
          "equipment": {
            "items": {
              "$ref": "#/components/schemas/EquippedItemSchema"
            },
            "type": "array",
            "title": "The character's equipment"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "data",
          "party",
          "player",
          "equipment"
        ],
        "title": "CharacterSchema",
        "description": "All details associated with a character"
      },
      "CharacterSchemaNoPartyNoData": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The character primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The character name"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "title": "The character slug, used to identify it in the API"
          },
          "class_": {
            "type": "string",
            "maxLength": 80,
            "title": "The character class"
          },
          "level": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The character level"
          },
          "data": {
            "type": "object",
            "title": "Data"
          },
          "party": {
            "$ref": "#/components/schemas/PartySchema"
          },
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerSchema"
              }
            ],
            "title": "The embedded character's player schema"
          },
          "equipment": {
            "items": {
              "$ref": "#/components/schemas/EquippedItemSchema"
            },
            "type": "array",
            "title": "The character's equipment"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "data",
          "party",
          "player",
          "equipment"
        ],
        "title": "CharacterSchemaNoPartyNoData",
        "description": "The details of a character, excluding the party"
      },
      "CharacterSchemaNoPlayer": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The character primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The character name"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "title": "The character slug, used to identify it in the API"
          },
          "class_": {
            "type": "string",
            "maxLength": 80,
            "title": "The character class"
          },
          "level": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The character level"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CharacterSheet"
              }
            ],
            "title": "Data",
            "description": "The embdedded character sheet JSON data"
          },
          "party": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartySchema"
              }
            ],
            "title": "The embedded character's party schema"
          },
          "player": {
            "$ref": "#/components/schemas/PlayerSchema"
          },
          "equipment": {
            "items": {
              "$ref": "#/components/schemas/EquippedItemSchema"
            },
            "type": "array",
            "title": "The character's equipment"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "data",
          "party",
          "player",
          "equipment"
        ],
        "title": "CharacterSchemaNoPlayer",
        "description": "The details of a character, excluding the player"
      },
      "CharacterSheet": {
        "properties": {
          "scores": {
            "$ref": "#/components/schemas/Scores"
          },
          "proficiencies": {
            "$ref": "#/components/schemas/Proficiencies"
          },
          "xp": {
            "type": "integer",
            "title": "Xp"
          },
          "race": {
            "type": "string",
            "title": "Race"
          },
          "background": {
            "type": "string",
            "title": "Background"
          },
          "alignment": {
            "type": "string",
            "title": "Alignment"
          },
          "darkvision": {
            "type": "boolean",
            "title": "Darkvision"
          },
          "inspiration": {
            "type": "boolean",
            "title": "Inspiration"
          },
          "speed": {
            "type": "integer",
            "title": "Speed"
          },
          "hp": {
            "$ref": "#/components/schemas/HitPoints"
          },
          "hit_dice": {
            "$ref": "#/components/schemas/HitDice"
          },
          "custom_resources": {
            "items": {
              "$ref": "#/components/schemas/CustomResource"
            },
            "type": "array",
            "title": "Custom Resources"
          },
          "attacks": {
            "items": {
              "$ref": "#/components/schemas/Attack"
            },
            "type": "array",
            "title": "Attacks"
          },
          "equipment": {
            "type": "string",
            "title": "Equipment"
          },
          "languages_and_proficiencies": {
            "type": "string",
            "title": "Languages And Proficiencies"
          },
          "personality": {
            "type": "string",
            "title": "Personality"
          },
          "ideals": {
            "type": "string",
            "title": "Ideals"
          },
          "bonds": {
            "type": "string",
            "title": "Bonds"
          },
          "features": {
            "type": "string",
            "title": "Features"
          },
          "spells": {
            "$ref": "#/components/schemas/Spells"
          }
        },
        "type": "object",
        "required": [
          "scores",
          "proficiencies",
          "xp",
          "race",
          "background",
          "alignment",
          "darkvision",
          "inspiration",
          "speed",
          "hp",
          "hit_dice",
          "custom_resources",
          "attacks",
          "equipment",
          "languages_and_proficiencies",
          "personality",
          "ideals",
          "bonds",
          "features",
          "spells"
        ],
        "title": "CharacterSheet"
      },
      "CustomResource": {
        "properties": {
          "header": {
            "type": "string",
            "title": "Header"
          },
          "available": {
            "type": "integer",
            "title": "Available"
          },
          "remaining": {
            "type": "integer",
            "title": "Remaining"
          }
        },
        "type": "object",
        "required": [
          "header",
          "available",
          "remaining"
        ],
        "title": "CustomResource"
      },
      "DisplayPartySchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The party primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The party name"
          },
          "members": {
            "items": {
              "$ref": "#/components/schemas/CharacterSchemaNoPartyNoData"
            },
            "type": "array",
            "title": "The party members"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "members"
        ],
        "title": "DisplayPartySchema",
        "description": "A party details, including the members"
      },
      "DisplayPlayerSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The player primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The player name"
          },
          "characters": {
            "items": {
              "$ref": "#/components/schemas/CharacterSchemaNoPlayer"
            },
            "type": "array",
            "title": "The player's characters"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "characters"
        ],
        "title": "DisplayPlayerSchema",
        "description": "A player details including the list of their characters"
      },
      "EquippedItemSchema": {
        "properties": {
          "item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemSchema"
              }
            ],
            "title": "The equipped item details"
          },
          "amount": {
            "type": "integer",
            "title": "The amount of associated items found in the character's equipment"
          },
          "equipped": {
            "type": "boolean",
            "title": "Weather the item is currently equipped"
          }
        },
        "type": "object",
        "required": [
          "item",
          "amount",
          "equipped"
        ],
        "title": "EquippedItemSchema",
        "description": "The details of an equipped item (the association bewteen an item and a character equipment)"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HitDice": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "remaining": {
            "type": "integer",
            "title": "Remaining"
          }
        },
        "type": "object",
        "required": [
          "type",
          "total",
          "remaining"
        ],
        "title": "HitDice"
      },
      "HitPoints": {
        "properties": {
          "max": {
            "type": "integer",
            "title": "Max"
          },
          "temp": {
            "type": "integer",
            "title": "Temp"
          },
          "current": {
            "type": "integer",
            "title": "Current"
          }
        },
        "type": "object",
        "required": [
          "max",
          "temp",
          "current"
        ],
        "title": "HitPoints"
      },
      "ItemSchema": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The item name"
          },
          "data": {
            "type": "object",
            "title": "Data",
            "description": "The embdedded item JSON data"
          }
        },
        "type": "object",
        "required": [
          "name",
          "data"
        ],
        "title": "ItemSchema",
        "description": "The details of an equipment item"
      },
      "ListCharacterSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The character primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The character name"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "title": "The character slug, used to identify it in the API"
          },
          "class_": {
            "type": "string",
            "maxLength": 80,
            "title": "The character class"
          },
          "level": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 1.0,
            "title": "The character level"
          },
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerSchema"
              }
            ],
            "title": "The embedded character's player schema"
          },
          "party": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PartySchema"
              }
            ],
            "title": "The embedded character's party schema"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "player",
          "party"
        ],
        "title": "ListCharacterSchema"
      },
      "PartySchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The party primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The party name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "PartySchema",
        "description": "The basic details of a party"
      },
      "PlayerSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1.0,
            "title": "The player primary key in database"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The player name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "PlayerSchema",
        "description": "The basic details of a player"
      },
      "Proficiencies": {
        "properties": {
          "saves": {
            "$ref": "#/components/schemas/SaveProficiencies"
          },
          "skills": {
            "$ref": "#/components/schemas/SkillProficiencies"
          }
        },
        "type": "object",
        "required": [
          "saves",
          "skills"
        ],
        "title": "Proficiencies"
      },
      "Proficiency": {
        "enum": [
          0,
          1,
          2
        ],
        "title": "Proficiency",
        "description": "An enumeration."
      },
      "SaveProficiencies": {
        "properties": {
          "strength": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "dexterity": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "constitution": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "intelligence": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "charisma": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "wisdom": {
            "$ref": "#/components/schemas/Proficiency"
          }
        },
        "type": "object",
        "required": [
          "strength",
          "dexterity",
          "constitution",
          "intelligence",
          "charisma",
          "wisdom"
        ],
        "title": "SaveProficiencies"
      },
      "Scores": {
        "properties": {
          "strength": {
            "type": "integer",
            "title": "Strength"
          },
          "dexterity": {
            "type": "integer",
            "title": "Dexterity"
          },
          "constitution": {
            "type": "integer",
            "title": "Constitution"
          },
          "wisdom": {
            "type": "integer",
            "title": "Wisdom"
          },
          "charisma": {
            "type": "integer",
            "title": "Charisma"
          },
          "intelligence": {
            "type": "integer",
            "title": "Intelligence"
          }
        },
        "type": "object",
        "required": [
          "strength",
          "dexterity",
          "constitution",
          "wisdom",
          "charisma",
          "intelligence"
        ],
        "title": "Scores"
      },
      "SkillProficiencies": {
        "properties": {
          "acrobatics": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "arcana": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "athletics": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "stealth": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "animal_handling": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "sleight_of_hand": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "history": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "intimidation": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "investigation": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "medicine": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "nature": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "perception": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "insight": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "persuasion": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "religion": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "performance": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "survival": {
            "$ref": "#/components/schemas/Proficiency"
          },
          "deception": {
            "$ref": "#/components/schemas/Proficiency"
          }
        },
        "type": "object",
        "required": [
          "acrobatics",
          "arcana",
          "athletics",
          "stealth",
          "animal_handling",
          "sleight_of_hand",
          "history",
          "intimidation",
          "investigation",
          "medicine",
          "nature",
          "perception",
          "insight",
          "persuasion",
          "religion",
          "performance",
          "survival",
          "deception"
        ],
        "title": "SkillProficiencies"
      },
      "Spell": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "prepared": {
            "type": "boolean",
            "title": "Prepared",
            "default": false
          },
          "somatic": {
            "type": "boolean",
            "title": "Somatic",
            "default": false
          },
          "verbal": {
            "type": "boolean",
            "title": "Verbal",
            "default": false
          },
          "material": {
            "type": "boolean",
            "title": "Material",
            "default": false
          },
          "ritual": {
            "type": "boolean",
            "title": "Ritual",
            "default": false
          },
          "concentration": {
            "type": "boolean",
            "title": "Concentration",
            "default": false
          },
          "invocation": {
            "$ref": "#/components/schemas/ActionType"
          },
          "origin": {
            "$ref": "#/components/schemas/SpellOrigin"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "title": "Spell"
      },
      "SpellOrigin": {
        "enum": [
          "class"
        ],
        "title": "SpellOrigin",
        "description": "An enumeration."
      },
      "Spells": {
        "properties": {
          "spellcasting_ability": {
            "type": "string",
            "title": "Spellcasting Ability"
          },
          "daily_prepared": {
            "type": "integer",
            "title": "Daily Prepared"
          },
          "cantrips": {
            "items": {
              "$ref": "#/components/schemas/Spell"
            },
            "type": "array",
            "title": "Cantrips",
            "default": []
          },
          "lvl1": {
            "items": {
              "$ref": "#/components/schemas/Spell"
            },
            "type": "array",
            "title": "Lvl1",
            "default": []
          },
          "lvl2": {
            "items": {
              "$ref": "#/components/schemas/Spell"
            },
            "type": "array",
            "title": "Lvl2",
            "default": []
          },
          "lvl3": {
            "items": {
              "$ref": "#/components/schemas/Spell"
            },
            "type": "array",
            "title": "Lvl3",
            "default": []
          },
          "lvl4": {
            "items": {
              "$ref": "#/components/schemas/Spell"
            },
            "type": "array",
            "title": "Lvl4",
            "default": []
          },
          "lvl5": {
            "items": {
              "$ref": "#/components/schemas/Spell"
            },
            "type": "array",
            "title": "Lvl5",
            "default": []
          },
          "lvl6": {
            "items": {
              "$ref": "#/components/schemas/Spell"
            },
            "type": "array",
            "title": "Lvl6",
            "default": []
          },
          "lvl7": {
            "items": {
              "$ref": "#/components/schemas/Spell"
            },
            "type": "array",
            "title": "Lvl7",
            "default": []
          },
          "lvl8": {
            "items": {
              "$ref": "#/components/schemas/Spell"
            },
            "type": "array",
            "title": "Lvl8",
            "default": []
          },
          "lvl9": {
            "items": {
              "$ref": "#/components/schemas/Spell"
            },
            "type": "array",
            "title": "Lvl9",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "spellcasting_ability",
          "daily_prepared"
        ],
        "title": "Spells"
      },
      "UpdateCharacterSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "A new character name (Optional)"
          },
          "class_": {
            "type": "string",
            "maxLength": 80,
            "title": "A new character class (Optional)"
          },
          "level": {
            "type": "integer",
            "minimum": 1.0,
            "title": "A new character level (Optional)"
          },
          "data": {
            "type": "object",
            "title": "Updates to the character sheet fields (Optional)"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "UpdateCharacterSchema"
      },
      "UpdatePartySchema": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The party new name"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "UpdatePartySchema"
      },
      "UpdatePlayerSchema": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "The player new name"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "UpdatePlayerSchema"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}