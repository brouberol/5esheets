{
  "openapi": "3.0.2",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/api/character/": {
      "get": {
        "tags": [
          "character"
        ],
        "summary": "List Characters",
        "description": "List all characters.\n\nThe returned payload will not include the character sheet details.",
        "operationId": "list_characters",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Character-List Characters",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListCharacterSchema"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OptionalOAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/character/{slug}": {
      "get": {
        "tags": [
          "character"
        ],
        "summary": "Display Character",
        "description": "Display all details of a given character.",
        "operationId": "display_character",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Slug",
              "type": "string"
            },
            "name": "slug",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OptionalOAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "character"
        ],
        "summary": "Update",
        "description": "Update a character details.\n\nExamples of JSON body paylods:\n\n- `{\"level\": 5 }`\n- `{\"name\": \"Toto\"}`\n- `{\"class_\": \"Guerrier\", \"data\": {\"background\": \"Folk Hero\"}}`\n\nIn the last example, we update both a direct character attribute\nas well as an attribute nested in the character JSON data.",
        "operationId": "update",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Slug",
              "type": "string"
            },
            "name": "slug",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCharacterSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Character-Update",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OptionalOAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/party/": {
      "get": {
        "tags": [
          "party"
        ],
        "summary": "List All Parties",
        "description": "List all parties the current player has characters in",
        "operationId": "list_all_parties",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Party-List All Parties",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PartySchema"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "OptionalOAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/party/{id}": {
      "get": {
        "tags": [
          "party"
        ],
        "summary": "Display Party",
        "description": "Display all details of a given party.",
        "operationId": "display_party",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayPartySchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OptionalOAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "party"
        ],
        "summary": "Update Party",
        "description": "Update a party details.\n\nExamples of JSON body paylods:",
        "operationId": "update_party",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePartySchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Party-Update Party",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OptionalOAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/player/{id}": {
      "get": {
        "tags": [
          "player"
        ],
        "summary": "Display Player",
        "description": "Display all details of a given player.",
        "operationId": "display_player",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisplayPlayerSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OptionalOAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "player"
        ],
        "summary": "Update Player",
        "description": "Update a player details.\n\nExamples of JSON body paylods:",
        "operationId": "update_player",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlayerSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Player-Update Player",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OptionalOAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/login/token": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "Login For Access Token",
        "description": "Submit a player's username and password to login.\n\nIf the password verifies, returns a JWT usable to communicate with the API.\nIf not, raise a 401 error.",
        "operationId": "login_for_access_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login-login_for_access_token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonWebToken"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_login-login_for_access_token": {
        "title": "Body_login-login_for_access_token",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "title": "Grant Type",
            "pattern": "password",
            "type": "string"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "scope": {
            "title": "Scope",
            "type": "string",
            "default": ""
          },
          "client_id": {
            "title": "Client Id",
            "type": "string"
          },
          "client_secret": {
            "title": "Client Secret",
            "type": "string"
          }
        }
      },
      "CharacterSchema": {
        "title": "CharacterSchema",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "data",
          "party",
          "player",
          "equipment"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "The character primary key in database",
            "minimum": 1.0,
            "type": "integer"
          },
          "name": {
            "title": "The character name",
            "maxLength": 255,
            "type": "string"
          },
          "slug": {
            "title": "The character slug, used to identify it in the API",
            "maxLength": 255,
            "type": "string"
          },
          "class_": {
            "title": "The character class",
            "maxLength": 80,
            "type": "string"
          },
          "level": {
            "title": "The character level",
            "minimum": 1.0,
            "type": "integer"
          },
          "data": {
            "title": "Data",
            "type": "object",
            "description": "The embdedded character sheet JSON data"
          },
          "party": {
            "title": "The embedded character's party schema",
            "allOf": [
              {
                "$ref": "#/components/schemas/PartySchema"
              }
            ]
          },
          "player": {
            "title": "The embedded character's player schema",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerSchema"
              }
            ]
          },
          "equipment": {
            "title": "The character's equipment",
            "allOf": [
              {
                "$ref": "#/components/schemas/EquipmentSchema"
              }
            ]
          }
        },
        "description": "All details associated with a character"
      },
      "CharacterSchemaNoPartyNoData": {
        "title": "CharacterSchemaNoPartyNoData",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "data",
          "party",
          "player",
          "equipment"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "The character primary key in database",
            "minimum": 1.0,
            "type": "integer"
          },
          "name": {
            "title": "The character name",
            "maxLength": 255,
            "type": "string"
          },
          "slug": {
            "title": "The character slug, used to identify it in the API",
            "maxLength": 255,
            "type": "string"
          },
          "class_": {
            "title": "The character class",
            "maxLength": 80,
            "type": "string"
          },
          "level": {
            "title": "The character level",
            "minimum": 1.0,
            "type": "integer"
          },
          "data": {
            "title": "Data",
            "type": "object"
          },
          "party": {
            "$ref": "#/components/schemas/PartySchema"
          },
          "player": {
            "title": "The embedded character's player schema",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerSchema"
              }
            ]
          },
          "equipment": {
            "title": "The character's equipment",
            "allOf": [
              {
                "$ref": "#/components/schemas/EquipmentSchema"
              }
            ]
          }
        },
        "description": "The details of a character, excluding the party"
      },
      "CharacterSchemaNoPlayer": {
        "title": "CharacterSchemaNoPlayer",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "data",
          "party",
          "player",
          "equipment"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "The character primary key in database",
            "minimum": 1.0,
            "type": "integer"
          },
          "name": {
            "title": "The character name",
            "maxLength": 255,
            "type": "string"
          },
          "slug": {
            "title": "The character slug, used to identify it in the API",
            "maxLength": 255,
            "type": "string"
          },
          "class_": {
            "title": "The character class",
            "maxLength": 80,
            "type": "string"
          },
          "level": {
            "title": "The character level",
            "minimum": 1.0,
            "type": "integer"
          },
          "data": {
            "title": "Data",
            "type": "object"
          },
          "party": {
            "title": "The embedded character's party schema",
            "allOf": [
              {
                "$ref": "#/components/schemas/PartySchema"
              }
            ]
          },
          "player": {
            "$ref": "#/components/schemas/PlayerSchema"
          },
          "equipment": {
            "title": "The character's equipment",
            "allOf": [
              {
                "$ref": "#/components/schemas/EquipmentSchema"
              }
            ]
          }
        },
        "description": "The details of a character, excluding the player"
      },
      "DisplayPartySchema": {
        "title": "DisplayPartySchema",
        "required": [
          "id",
          "name",
          "members"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "The party primary key in database",
            "minimum": 1.0,
            "type": "integer"
          },
          "name": {
            "title": "The party name",
            "maxLength": 255,
            "type": "string"
          },
          "members": {
            "title": "The party members",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterSchemaNoPartyNoData"
            }
          }
        },
        "description": "A party details, including the members"
      },
      "DisplayPlayerSchema": {
        "title": "DisplayPlayerSchema",
        "required": [
          "id",
          "name",
          "characters"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "The player primary key in database",
            "minimum": 1.0,
            "type": "integer"
          },
          "name": {
            "title": "The player name",
            "maxLength": 255,
            "type": "string"
          },
          "characters": {
            "title": "The player's characters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterSchemaNoPlayer"
            }
          }
        },
        "description": "A player details including the list of their characters"
      },
      "EquipmentSchema": {
        "title": "EquipmentSchema",
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EquippedItemSchema"
            }
          }
        },
        "description": "The details of a character's equipment"
      },
      "EquippedItemSchema": {
        "title": "EquippedItemSchema",
        "required": [
          "item",
          "amount"
        ],
        "type": "object",
        "properties": {
          "item": {
            "title": "The equipped item details",
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemSchema"
              }
            ]
          },
          "amount": {
            "title": "The amount of associated items found in the character's equipment",
            "type": "integer"
          }
        },
        "description": "The details of an equipped item (the association bewteen an item and a character equipment)"
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ItemSchema": {
        "title": "ItemSchema",
        "required": [
          "name",
          "data"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "The item name",
            "maxLength": 255,
            "type": "string"
          },
          "data": {
            "title": "Data",
            "type": "object",
            "description": "The embdedded item JSON data"
          }
        },
        "description": "The details of an equipment item"
      },
      "JsonWebToken": {
        "title": "JsonWebToken",
        "required": [
          "access_token",
          "token_type"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          },
          "token_type": {
            "title": "Token Type",
            "type": "string"
          }
        }
      },
      "ListCharacterSchema": {
        "title": "ListCharacterSchema",
        "required": [
          "id",
          "name",
          "slug",
          "class_",
          "level",
          "player",
          "party"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "The character primary key in database",
            "minimum": 1.0,
            "type": "integer"
          },
          "name": {
            "title": "The character name",
            "maxLength": 255,
            "type": "string"
          },
          "slug": {
            "title": "The character slug, used to identify it in the API",
            "maxLength": 255,
            "type": "string"
          },
          "class_": {
            "title": "The character class",
            "maxLength": 80,
            "type": "string"
          },
          "level": {
            "title": "The character level",
            "maximum": 20.0,
            "minimum": 1.0,
            "type": "integer"
          },
          "player": {
            "title": "The embedded character's player schema",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerSchema"
              }
            ]
          },
          "party": {
            "title": "The embedded character's party schema",
            "allOf": [
              {
                "$ref": "#/components/schemas/PartySchema"
              }
            ]
          }
        }
      },
      "PartySchema": {
        "title": "PartySchema",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "The party primary key in database",
            "minimum": 1.0,
            "type": "integer"
          },
          "name": {
            "title": "The party name",
            "maxLength": 255,
            "type": "string"
          }
        },
        "description": "The basic details of a party"
      },
      "PlayerSchema": {
        "title": "PlayerSchema",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "The player primary key in database",
            "minimum": 1.0,
            "type": "integer"
          },
          "name": {
            "title": "The player name",
            "maxLength": 255,
            "type": "string"
          }
        },
        "description": "The basic details of a player"
      },
      "UpdateCharacterSchema": {
        "title": "UpdateCharacterSchema",
        "type": "object",
        "properties": {
          "name": {
            "title": "A new character name (Optional)",
            "type": "string"
          },
          "class_": {
            "title": "A new character class (Optional)",
            "maxLength": 80,
            "type": "string"
          },
          "level": {
            "title": "A new character level (Optional)",
            "minimum": 1.0,
            "type": "integer"
          },
          "data": {
            "title": "Updates to the character sheet fields (Optional)",
            "type": "object"
          }
        }
      },
      "UpdatePartySchema": {
        "title": "UpdatePartySchema",
        "type": "object",
        "properties": {
          "name": {
            "title": "The party new name",
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "UpdatePlayerSchema": {
        "title": "UpdatePlayerSchema",
        "type": "object",
        "properties": {
          "name": {
            "title": "The player new name",
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "OptionalOAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/login/token"
          }
        }
      }
    }
  }
}